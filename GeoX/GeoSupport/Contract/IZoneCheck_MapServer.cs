#region WSCF
//------------------------------------------------------------------------------
// <autogenerated code>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated code>
//------------------------------------------------------------------------------
// File time 28-12-11 02:35 PM
//
// This source code was auto-generated by WsContractFirst, Version=0.7.6319.1
#endregion


namespace GeoSupport.ClientProxy
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    public interface IZoneCheck_MapServer
    {
        
        PropertySet GetDocumentInfo();
        
        TileImageInfo GetTileImageInfo(string MapName);
        
        QueryResult QueryFeatureData2(string MapName, LayerDescription LayerDescription, QueryFilter QueryFilter, QueryResultOptions QueryResultOptions);
        
        AttachmentInfo[] QueryAttachmentInfos(string MapName, int TableID, int[] RowIDs);
        
        CacheControlInfo GetCacheControlInfo(string MapName);
        
        LayerDrawingDescription[] GetDefaultLayerDrawingDescriptions(string MapName, int[] LayerIDs, ServerSymbolOutputOptions SymbolOutputOptions);
        
        AttachmentData[] QueryAttachmentData(string MapName, int TableID, int[] AttachmentIDs, esriTransportType TransportType);
        
        SQLSyntaxInfo GetSQLSyntaxInfo(string MapName, int LayerID);
        
        ImageResult ExportScaleBar(ScaleBar ScaleBar, MapDescription MapDescription, ImageDisplay MapDisplay, Color BackGroundColor, ImageDescription ImageDescription);
        
        string GetVirtualCacheDirectory(string MapName, int LayerID);
        
        int QueryRowCount(string MapName, MapTableDescription MapTableDescription, QueryFilter QueryFilter);
        
        esriImageReturnType GetSupportedImageReturnTypes();
        
        FIDSet QueryFeatureIDs(string MapName, int LayerID, QueryFilter QueryFilter);
        
        QueryResult QueryData(string MapName, MapTableDescription MapTableDescription, QueryFilter QueryFilter, QueryResultOptions QueryResultOptions);
        
        string[] QueryHTMLPopups(string MapName, int TableID, int[] RowIDs);
        
        CacheStorageInfo GetCacheStorageInfo(string MapName);
        
        Multipoint ToMapPoints(MapDescription MapDescription, ImageDisplay MapImageDisplay, int[] ScreenXValues, int[] ScreenYValues);
        
        string GetMapName(int Index);
        
        TileCacheInfo GetTileCacheInfo(string MapName);
        
        QueryResult QueryRelatedRecords(string MapName, int SourceTableID, FIDSet SourceFIDSet, RelateDescription RelateDescription);
        
        RecordSet QueryFeatureData(string MapName, int LayerID, QueryFilter QueryFilter);
        
        MapServerHyperlink[] QueryHyperlinks(MapDescription MapDescription, ImageDisplay MapImageDisplay, int[] LayerIDs);
        
        bool HasLayerCache(string MapName, int LayerID);
        
        FIDSet QueryFeatureIDs2(string MapName, LayerDescription LayerDescription, QueryFilter QueryFilter);
        
        byte[] GetLayerTile(string MapName, int LayerID, int Level, int Row, int Column, string Format);
        
        PropertySet GetServiceConfigurationInfo();
        
        int QueryFeatureCount2(string MapName, LayerDescription LayerDescription, QueryFilter QueryFilter);
        
        CacheDescriptionInfo GetCacheDescriptionInfo(string MapName);
        
        MapServerIdentifyResult[] Identify(MapDescription MapDescription, ImageDisplay MapImageDisplay, Geometry SearchShape, int Tolerance, esriIdentifyOption IdentifyOption, int[] LayerIDs);
        
        double ComputeDistance(string MapName, Point FromPoint, Point ToPoint, esriUnits Units);
        
        string GetDefaultMapName();
        
        bool IsFixedScaleMap(string MapName);
        
        MapServerLegendInfo[] GetLegendInfo(string MapName, int[] LayerIDs, MapServerLegendPatch LegendPatch, ImageType ImageType);
        
        int GetMapCount();
        
        bool HasSingleFusedMapCache(string MapName);
        
        byte[] GetMapTile(string MapName, int Level, int Row, int Column, string Format);
        
        MapServerInfo GetServerInfo(string MapName);
        
        MapTableSubtypeInfo[] GetMapTableSubtypeInfos(string MapName, int[] TableIDs);
        
        int QueryFeatureCount(string MapName, int LayerID, QueryFilter QueryFilter);
        
        ImageResult[] QueryRasterValue(string MapName, int SourceTableID, int[] RowIDs, string FieldName, ImageType ImageType);
        
        int[] FromMapPoints(MapDescription MapDescription, ImageDisplay MapImageDisplay, Multipoint MapPoints, out int[] ScreenYValues);
        
        int[] QueryRowIDs(string MapName, MapTableDescription MapTableDescription, QueryFilter QueryFilter);
        
        string GetCacheName(string MapName, int LayerID);
        
        double ComputeScale(MapDescription MapDescription, ImageDisplay MapImageDisplay);
        
        MapServerFindResult[] Find(MapDescription MapDescription, ImageDisplay MapImageDisplay, string SearchString, bool Contains, string SearchFields, esriFindOption FindOption, int[] LayerIDs);
        
        MapImage ExportMapImage(MapDescription MapDescription, ImageDescription ImageDescription);
    }
}
